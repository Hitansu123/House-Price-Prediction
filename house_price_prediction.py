# -*- coding: utf-8 -*-
"""House price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gAUBByWQmlktJG44VKo5hftIrdz5JLPQ

Importing libraries

# New Section
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn import metrics
from xgboost import XGBRegressor
from sklearn import metrics

"""Importing the California house price dataset"""

house_price_dataset=sklearn.datasets.fetch_california_housing()

print (house_price_dataset)

# Loading the dataset to a pandas Dataframe
house_price_dataframe = pd.DataFrame(house_price_dataset.data, columns = house_price_dataset.feature_names)

# print first 5 rows of the dataframe
house_price_dataframe.head()

house_price_dataframe.tail()

# add the target column to the Dataframe
house_price_dataframe['price'] = house_price_dataset.target

house_price_dataframe.head()

# checking the number of rows and column in the data frame
house_price_dataframe.shape

# checking for missing values
house_price_dataframe.isnull().sum()

# statical measures of the dataset
house_price_dataframe.describe()

"""Undestanding the correlation between various feature in dataset"""

correlation = house_price_dataframe.corr()

plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

"""Splitting the data and target"""

x=house_price_dataframe.drop(['price'],axis=1)
y=house_price_dataframe['price']

print(x)
print(y)

"""Splitting the data into training data and test data"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)
print(x.shape,x_train.shape,x_test.shape)

"""Model Training

"""

model=XGBRegressor()

# training the model with x train
model.fit(x_train, y_train)

#prediction on training data
training_data_predict=model.predict(x_train)
print(training_data_predict)

score_1=metrics.r2_score(y_train,training_data_predict)
score_2=metrics.mean_absolute_error(y_train,training_data_predict)
print("R squared error=",score_1)
print("mean squared error=",score_2)

"""visualizing the actual prices and predicted prices"""

plt.scatter(y_train,training_data_predict)
plt.xlabel("actual prices")
plt.ylabel("predected prices")
plt.title("actual vs predected price")
plt.show()

#prediction on test data
test_data_prediction=model.predict(x_test)

score_1=metrics.r2_score(y_test,test_data_prediction)
score_2=metrics.mean_absolute_error(y_test,test_data_prediction)
print("R squared error=",score_1)
print("mean squared error=",score_2)

"""Saving the trained model"""

import joblib

joblib.dump(model, "lr_model.sav")